Parameters:
  DBPassword:
    Type: String
    Default: "admin123"
    NoEcho: true
    Description: "Database password"
  DBName:
    Type: String
    Default: "photoalbum"
    Description: "Database name"
  FirstnameInitials:
    Type: String
    Default: "S"
    Description: "First initials"
  Lastname:
    Type: String
    Default: "Tangjarukij"
    Description: "Last name"
  Project:
    Type: String
    Default: "assignment1b"
    Description: "Project name"
  Prefix:
    Type: String
    Default: "assignment1b"
    Description: "Prefix for all resources"
  Region:
    Type: String
    Default: "us-east-1"
    Description: "AWS region"

  AMI:
    Type: String
    Default: "ami-005f9685cb30f234b"
    Description: "AMI ID"

  InstanceType:
    Type: String
    Default: "t2.micro"
    Description: "Instance type"
  KeyName:
    Type: String
    Default: "vockey"
    Description: "Keypair name"
Resources:
  # vpc starts here
  VPC:
    Type: AWS::EC2::VPC # the main thing that we are concerned with
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_${FirstnameInitials}${Lastname}-VPC"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PublicSubnet1"
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PublicSubnet2"
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PrivateSubnet1"
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PrivateSubnet2"
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
    
  #internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_InternetGateway"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  #RouteTables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PublicRouteTable"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PrivateRouteTable"
  ## Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  ### Subnet Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ## Private
  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: InternetGateway
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: "0.0.0.0/0"
  ### Subnet Associations
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable


  #subnet groups
  # PublicSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties:
  #     DBSubnetGroupDescription: "Public Subnet Group"
  #     SubnetIds:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  RDSInstanceSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Private Subnet Group For RDS Instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  #instances
  TestInstanceEC2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - PrivateSubnet1
    Properties:
      ImageId: !Sub "${AMI}"
      InstanceType: !Sub "${InstanceType}"
      KeyName: !Sub "${KeyName}"
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_Test Instance"
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          SubnetId: !Ref PrivateSubnet2
          GroupSet:
            - !Ref TestInstanceSG



  WebServerEC2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - PublicSubnet1
    Properties:
      ImageId: !Sub "${AMI}"
      InstanceType: !Sub "${InstanceType}"
      KeyName: !Sub "${KeyName}"
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_Bastion/Web server"
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref WebServerSG
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            service httpd start
            yum install -y httpd mariadb-server php-mbstring php-xml git
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec sudo chmod 2775 {} \;
            find /var/www -type f -exec sudo chmod 0664 {} \;
            echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
            git clone https://github.com/RadstalST/PhotoAlabum3.0.git /var/www/html/cos80001/photoalbum
          
  DBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - DBServerSG
      - RDSInstanceSubnetGroup
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: "8.0.25"
      PubliclyAccessible: false
      MultiAZ: false
      DBSubnetGroupName: !Ref RDSInstanceSubnetGroup
      MasterUsername: admin
      MasterUserPassword: !Sub "${DBPassword}"
      DBName: !Sub "${DBName}"
      AvailabilityZone: !GetAtt PrivateSubnet1.AvailabilityZone
      AllocatedStorage: "20"
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DBServerSG
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_RDS Instance"



  



  #NACLs
  PublicSubnet2NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PublicSubnet2NACL"
  # PublicSubnet2NACLAssociation:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnet2
  #     NetworkAclId: !Ref PublicSubnet2NACL
  # allow ssh inbound
  SSHInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:     
      NetworkAclId: !Ref PublicSubnet2NACL
      Protocol: "6" #TCP
      RuleNumber: "101"
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"
      Egress: false
      PortRange:
        From: "22"
        To: "22"
  SSHOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:     
      NetworkAclId: !Ref PublicSubnet2NACL
      Protocol: "6" #TCP
      RuleNumber: "101"
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"
      Egress: true
      PortRange:
        From: "22"
        To: "22"
  #Allow ICMP inbound and outbound
  ICMPInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:     
      NetworkAclId: !Ref PublicSubnet2NACL
      Protocol: 1 #ICMP
      RuleNumber: 100
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      Egress: false
      PortRange:
        From: 0
        To: 65535
      Icmp:
        Code: -1
        Type: -1
  ICMPOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:     
      NetworkAclId: !Ref PublicSubnet2NACL
      Protocol: 1 #ICMP
      RuleNumber: 100
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      Egress: true
      PortRange:
        From: 0
        To: 65535
      Icmp:
        Code: -1
        Type: -1

  #security groups

  TestInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_TestInstanceSG"
          
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: TestInstanceSG
    Properties:
      GroupDescription: Enable SSH and HTTP access and icmp from TestInstanceSG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_WebServerSG"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt TestInstanceSG.GroupId
      
      
  DBServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EnableMYSQL access from WebServerSG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_DBServerSG"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt WebServerSG.GroupId


  PhotoStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Prefix}-bucket"
      # AccessControl: PublicRead
      #no acl

      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_PhotoStorageBucket"

  PhotoPublicAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotoStorageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${PhotoStorageBucket}/*"
Outputs:
  WebInstancePublicDNS:
    Description: Public DNS of the EC2 instance
    Value: !GetAtt WebServerEC2.PublicDnsName
  WebInstancePrivateIP:
    Description: Private IP of the EC2 instance
    Value: !GetAtt WebServerEC2.PrivateIp
  TestInstancePrivateIP:
    Description: Private IP of the EC2 instance
    Value: !GetAtt TestInstanceEC2.PrivateIp
  DBinstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt DBInstance.Endpoint.Address
 
    